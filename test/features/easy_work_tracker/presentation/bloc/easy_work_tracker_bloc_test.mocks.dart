// Mocks generated by Mockito 5.0.17 from annotations
// in franks_invoice_tool/test/features/easy_work_tracker/presentation/bloc/easy_work_tracker_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:franks_invoice_tool/core/errors/failure.dart' as _i5;
import 'package:franks_invoice_tool/core/usecases/usecase.dart' as _i9;
import 'package:franks_invoice_tool/core/util/input_converter.dart' as _i4;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/entities/all_tracking_periods.dart'
    as _i8;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/entities/tracking_period.dart'
    as _i11;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/repositories/easy_work_tracker_repository.dart'
    as _i3;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/usecases/add_tracking_period.dart'
    as _i12;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/usecases/add_work_item.dart'
    as _i10;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/usecases/get_tracking_periods.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeEasyWorkTrackerRepository_1 extends _i1.Fake
    implements _i3.EasyWorkTrackerRepository {}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i4.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<_i5.Failure, int> convertStringToUnsignedInt(
          String? stringInput) =>
      (super.noSuchMethod(
              Invocation.method(#convertStringToUnsignedInt, [stringInput]),
              returnValue: _FakeEither_0<_i5.Failure, int>())
          as _i2.Either<_i5.Failure, int>);
}

/// A class which mocks [GetTrackingPeriods].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTrackingPeriods extends _i1.Mock
    implements _i6.GetTrackingPeriods {
  MockGetTrackingPeriods() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.EasyWorkTrackerRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeEasyWorkTrackerRepository_1())
          as _i3.EasyWorkTrackerRepository);
  @override
  _i7.Future<_i2.Either<_i5.Failure, _i8.AllTrackingPeriods>> call(
          _i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i8.AllTrackingPeriods>>.value(
                      _FakeEither_0<_i5.Failure, _i8.AllTrackingPeriods>()))
          as _i7.Future<_i2.Either<_i5.Failure, _i8.AllTrackingPeriods>>);
}

/// A class which mocks [AddWorkItem].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddWorkItem extends _i1.Mock implements _i10.AddWorkItem {
  MockAddWorkItem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.EasyWorkTrackerRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeEasyWorkTrackerRepository_1())
          as _i3.EasyWorkTrackerRepository);
  @override
  _i7.Future<_i2.Either<_i5.Failure, _i11.TrackingPeriod>> call(
          _i10.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i11.TrackingPeriod>>.value(
                      _FakeEither_0<_i5.Failure, _i11.TrackingPeriod>()))
          as _i7.Future<_i2.Either<_i5.Failure, _i11.TrackingPeriod>>);
}

/// A class which mocks [AddTrackingPeriod].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTrackingPeriod extends _i1.Mock implements _i12.AddTrackingPeriod {
  MockAddTrackingPeriod() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.EasyWorkTrackerRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeEasyWorkTrackerRepository_1())
          as _i3.EasyWorkTrackerRepository);
  @override
  _i7.Future<_i2.Either<_i5.Failure, _i8.AllTrackingPeriods>> call(
          _i12.TrackingPeriodParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i8.AllTrackingPeriods>>.value(
                      _FakeEither_0<_i5.Failure, _i8.AllTrackingPeriods>()))
          as _i7.Future<_i2.Either<_i5.Failure, _i8.AllTrackingPeriods>>);
}
