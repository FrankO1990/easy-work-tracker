// Mocks generated by Mockito 5.0.17 from annotations
// in franks_invoice_tool/test/features/easy_work_tracker/domain/usecases/get_tracking_periods_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:franks_invoice_tool/core/errors/failure.dart' as _i5;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/entities/all_tracking_periods.dart'
    as _i6;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/entities/tracking_period.dart'
    as _i7;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/entities/work_item.dart'
    as _i8;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/repositories/easy_work_tracker_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [EasyWorkTrackerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEasyWorkTrackerRepository extends _i1.Mock
    implements _i3.EasyWorkTrackerRepository {
  MockEasyWorkTrackerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AllTrackingPeriods>>
      getTrackingPeriods() => (super.noSuchMethod(
              Invocation.method(#getTrackingPeriods, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i6.AllTrackingPeriods>>.value(
                      _FakeEither_0<_i5.Failure, _i6.AllTrackingPeriods>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.AllTrackingPeriods>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AllTrackingPeriods>> addTrackingPeriod(
          _i7.TrackingPeriod? trackingPeriod) =>
      (super.noSuchMethod(
              Invocation.method(#addTrackingPeriod, [trackingPeriod]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i6.AllTrackingPeriods>>.value(
                      _FakeEither_0<_i5.Failure, _i6.AllTrackingPeriods>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.AllTrackingPeriods>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.TrackingPeriod>> addWorkItem(
          _i8.WorkItem? workItem) =>
      (super.noSuchMethod(Invocation.method(#addWorkItem, [workItem]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i7.TrackingPeriod>>.value(
                      _FakeEither_0<_i5.Failure, _i7.TrackingPeriod>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i7.TrackingPeriod>>);
}
