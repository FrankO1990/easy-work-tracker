// Mocks generated by Mockito 5.0.17 from annotations
// in franks_invoice_tool/test/features/easy_work_tracker/data/repository/easy_work_tracker_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:franks_invoice_tool/core/util/network_info.dart' as _i4;
import 'package:franks_invoice_tool/features/easy_work_tracker/data/datasources/easy_work_tracker_remote_data_source.dart'
    as _i6;
import 'package:franks_invoice_tool/features/easy_work_tracker/data/models/all_tracking_periods_model.dart'
    as _i2;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/entities/tracking_period.dart'
    as _i3;
import 'package:franks_invoice_tool/features/easy_work_tracker/domain/entities/work_item.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAllTrackingPeriodsModel_0 extends _i1.Fake
    implements _i2.AllTrackingPeriodsModel {}

class _FakeTrackingPeriod_1 extends _i1.Fake implements _i3.TrackingPeriod {}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i4.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [EasyWorkTrackerRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockEasyWorkTrackerRemoteDataSource extends _i1.Mock
    implements _i6.EasyWorkTrackerRemoteDataSource {
  MockEasyWorkTrackerRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.AllTrackingPeriodsModel> addTrackingPeriod(
          _i3.TrackingPeriod? trackingPeriodModel) =>
      (super.noSuchMethod(
              Invocation.method(#addTrackingPeriod, [trackingPeriodModel]),
              returnValue: Future<_i2.AllTrackingPeriodsModel>.value(
                  _FakeAllTrackingPeriodsModel_0()))
          as _i5.Future<_i2.AllTrackingPeriodsModel>);
  @override
  _i5.Future<_i3.TrackingPeriod> addWorkItem(_i7.WorkItem? workItem) =>
      (super.noSuchMethod(Invocation.method(#addWorkItem, [workItem]),
              returnValue:
                  Future<_i3.TrackingPeriod>.value(_FakeTrackingPeriod_1()))
          as _i5.Future<_i3.TrackingPeriod>);
  @override
  _i5.Future<_i2.AllTrackingPeriodsModel> getTrackingPeriods() =>
      (super.noSuchMethod(Invocation.method(#getTrackingPeriods, []),
              returnValue: Future<_i2.AllTrackingPeriodsModel>.value(
                  _FakeAllTrackingPeriodsModel_0()))
          as _i5.Future<_i2.AllTrackingPeriodsModel>);
}
